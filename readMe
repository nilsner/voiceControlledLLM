## Detailed Module Descriptions

### Main Class
- **Description**: The main class orchestrates the entire system, ensuring smooth interaction between the ultrasonic sensor and the voice recognition system.
- **Technical Details**:
    - **Initialization**: Sets up the ultrasonic sensor and voice recognition system, configuring necessary parameters.
    - **User Detection**: Continuously monitors the ultrasonic sensor for user presence.
    - **Voice Command Handling**: Activates the voice recognition system when a user is detected, processes the captured voice commands, and interacts with the language model to execute the commands.
    - **Idling**: Puts the system in an idle state when no user is detected, conserving resources.

### UltrasonicSensor Class
- **Description**: Manages the ultrasonic sensor to detect user presence.
- **Technical Details**:
    - **Distance Measurement**: Uses the ultrasonic sensor to measure the distance to the nearest object by sending out sound waves and calculating the time taken for the echo to return.
    - **User Detection**: Compares the measured distance against a predefined threshold to determine if a user is within range.
    - **Notification**: Sends signals to the main class when a user is detected or when the user leaves the range, enabling the main class to start or stop the voice recognition system accordingly.

### LLMModule Class
- **Description**: Handles natural language processing using Google's Gemini AI model to interpret user requests.
- **Technical Details**:
    - **API Integration**: Uses Google's Generative AI API with Gemini 1.5
    - **Request Processing**: Analyzes user input for politeness and specific water requests
    - **Response Format**: Returns structured JSON with:
        - `allowedWater`: Boolean indicating if request is approved
        - `answer`: Feedback message for the user
        - `typeOfWater`: Specified water temperature (hot/cold)

### SpeechToText Class
- **Description**: Manages speech recognition using Google's Speech Recognition service.
- **Technical Details**:
    - **Audio Capture**: Uses PyAudio to capture audio from the microphone
    - **Speech Recognition**: Converts spoken words to text using Google Speech Recognition
    - **Error Handling**: Manages recognition failures and service request errors

### TextToSpeech Class
- **Description**: Manages text-to-speech functionality using eSpeak for audio feedback.
- **Technical Details**:
    - **Audio Configuration**: Sets up audio output for Grove speaker
    - **Speech Parameters**: Configures voice rate and volume
    - **Synthesis**: Converts text to speech and plays through the speaker
    - **Hardware Integration**: Uses ALSA audio system for Raspberry Pi

### WaterController Class
- **Description**: Controls the water dispensing system for both hot and cold water.
- **Technical Details**:
    - **State Management**: Tracks dispensing status and timing
    - **Safety Features**: Implements automatic 7-second dispensing timeout
    - **Water Types**: Supports both hot and cold water dispensing
    - **Thread Safety**: Uses threading for timer-based operations
    - **Error Handling**: Prevents concurrent dispensing operations

### Sequence Diagram of applciation

```mermaid
sequenceDiagram
    participant User
    participant UltrasonicSensor
    participant Main
    participant SpeechToText
    participant LLMModule
    participant TextToSpeech
    participant WaterController

    loop Continuous Detection
        UltrasonicSensor->>Main: Check distance
        alt User detected (distance < threshold)
            UltrasonicSensor->>Main: User presence detected
            Main->>SpeechToText: Activate listening
            User->>SpeechToText: Speak command
            SpeechToText->>Main: Convert speech to text
            Main->>LLMModule: Process text command
            LLMModule->>Main: Return response (JSON)
            Main->>TextToSpeech: Convert response to speech
            TextToSpeech->>User: Play audio response
            alt Water request approved
                Main->>WaterController: Dispense water
                WaterController->>User: Dispense requested water
            end
        else No user detected
            UltrasonicSensor->>Main: User out of range
            Main->>Main: Enter idle state
            Main->>SpeechToText: Deactivate listening
        end
    end